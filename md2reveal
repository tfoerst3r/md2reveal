#!/bin/bash

setlocal=1
self_contained=1
date_var=1
toc_var=1
back_var=1
create_pdf=1
tmp="tmp_"

#-- You can set the kroki, see docu to pandoc-kroki on github
#KROKI_VAR=

#-- General options
#.. katex CDN, see https://cdnjs.com/libraries/KaTeX
#.. revealjs CDN, see https://cdnjs.cloudflare.com/ajax/libs/reveal.js/4.3.1/reveal.js
#.. defaults to https://unpkg.com/reveal.js@^4/

#== Empty Variables ==#
bibliography=
latex=
lua=
revealjs=
theme=
level=
title_background=
title_background_color=


#== Default Settings ==#
BIB_VAR="./literature.bib"
LATEX_VAR=
LUA_VAR=
THEME_VAR="white"
LEVEL_VAR=2


#== Personal Settings ==#
source $HOME/.md2revealrc


#== Personal TEX commands ==#
tex_varA=$(cat $HOME/.md2revealrc_tex)
#-- newline command
tex_varN='
'
#-- merged entry
texdef="$tex_varN$tex_varA$tex_varN"

#-------------#

function die() {
    local scrname=$(basename "$0")
    echo "$scrname: $1" >&2
    exit 1
}

function msg() {
    local scrname=$(basename "$0")
    echo "$scrname: $1" >&2
}

trap 'die "Execution aborted."' 1 2 3 9 15

#-------------#

function check_folder {

while [ -n "$1" ]; do

    if [[ -d $1 ]]
    then
        echo "0"
        shift
    else
        echo "1"
        shift
    fi

done
}

#-------------#

function check_file {

if [ -n "$1" ]; then

    if [[ -f $1 ]]; then
        echo "0"
    else
        echo "1"
    fi

else
    echo "1"
fi
}

#-------------#

function check_variable(){
    if [[ -z ${1+xxx} ]]; then 
        # VAR is not set at all
        echo "2"
    elif [[ -z $1 ]] && [[ ${1+xxx} == "xxx" ]]; then 
        # VAR is set but empty
        echo "1"
    elif [[ ! -z $1 ]]; then 
        # VAR is set 
        echo "0"
    else
        # VAR has an unknown configuration
        echo "3"
    fi
}

#-------------#
#-------------#
#-------------#

function set_bibliography(){

local option="--bibliography"
local postoption="--citeproc"
local setting_manually="$bibliography"
local setting_default=$BIB_VAR
local setting_my=$MY_BIB_VAR

if [[ $setlocal == 0 && $(check_variable $setting_manually) != 0 ]]; then
    
    if [[ $(check_variable $setting_my) == 0 ]]; then
        # variable set manually
        local var="$option=$setting_my $postoption"
    elif [[ $(check_variable $setting_my) == 2 ]]; then
        # variable not set, default
        local var="$option=$setting_default $postoption"
    fi 

elif [[ $(check_variable $setting_manually) == 0 ]]; then
    
    if [[ $(check_file $setting_manually) != 0 ]]; then
        die "The given bib file $setting_manually does not exist."
    else
        # variable set manually
        local var="$option=$setting_manually $postoption"
    fi

elif [[ $(check_variable $setting_manually) == 2 ]]; then
    
    # variable not set, default
    local var=""

else
    
    die "Error with the bibliography option"

fi

#..return value
echo "$var"

}

#-------------#

function set_latex(){

local option="--katex"
local setting_manually="$latex"
local setting_default=$LATEX_VAR
local setting_my=$MY_LATEX_VAR

if [[ $setlocal == 0 && $(check_variable $setting_manually) != 0 ]]; then

    # variable not set, my default
    if [[ $(check_variable $setting_my) == 0 ]]; then
        # variable set manually
        local var="$option=$setting_my"
    elif [[ $(check_variable $setting_my) == 2 ]]; then
        # variable not set, default
        local var="$option"
    fi 

elif [[ $(check_variable $setting_manually) == 0 ]]; then
    
    if [[ $(check_folder $setting_manually) != 0 ]]; then
        die "The given latex path $setting_manually does not exist."
    else
        # variable set manually
        local var="$option=\"$setting_manually\""
    fi

elif [[ $(check_variable $setting_manually) == 2 ]]; then
    
    # variable not set, default
    local var="$option"
else
    
    die "Error with the latex option"

fi
#..return value
echo "$var"
}

#-------------#

function set_lua(){

local option="--lua-filter"
local setting_manually="$lua"
local setting_default=$LUA_VAR
local setting_my=$MY_LUA_VAR

if [[ $setlocal == 0 && $(check_variable $setting_manually) != 0 ]]; then

    # variable not set, my default
    if [[ $(check_variable $setting_my) == 0 ]]; then
        # variable set manually
        local var="$option $setting_my"
    elif [[ $(check_variable $setting_my) == 2 ]]; then
        # variable not set, default
        local var=""
    fi 

elif [[ $(check_variable $setting_manually) == 0 ]]; then
    
    if [[ $(check_file $setting_manually) != 0 ]]; then
        die "The given lua file $setting_manually does not exist."
    else
        # variable set manually
        local var="$option=$setting_manually"
    fi

elif [[ $(check_variable $setting_manually) == 2 ]]; then
    
    # variable not set, default
    local var=""
else
    
    die "Error with the lua option"

fi
#..return value
echo "$var"
}

#-------------#

function set_revealjs(){

local option="--variable revealjs-url"
local setting_manually=${revealjs}
local setting_my=${MY_REVEALJS_VAR}

if [[ $setlocal == 0 && $(check_variable $setting_manually) != 0 ]]; then
    
    # variable not set, my default
    if [[ $(check_variable $setting_my) == 0 ]]; then
        # variable set manually
        local var="$option=$setting_my"
    elif [[ $(check_variable $setting_my) == 2 ]]; then
        # variable not set, default
        local var=""
    fi 

elif [[ $(check_variable $setting_manually) == 0 ]]; then
    
    if [[ $(check_folder $setting_manually) != 0 ]]; then
        die "The given reveal.js path $setting_manually does not exist."
    else
        # variable set manually
        local var="$option=$setting_manually"
    fi

elif [[ $(check_variable $setting_manually) == 2 ]]; then
    
    # variable not set, default
    local var=""

else
    
    die "Error with the revealjs option"

fi

#..return value
echo "$var"

}

#-------------#

function set_theme(){

local option="--variable theme:"
local setting_manually="$theme"
local setting_default=$THEME_VAR
local setting_my=$MY_THEME_VAR

flag_theme_in_file=$(check_variable $theme_in_file)

if [[ $flag_theme_in_file != 0 ]]; then

    if [[ $setlocal == 0 && $(check_variable $setting_manually) != 0 ]]; then
    
        # variable not set, my default
        if [[ $(check_variable $setting_my) == 0 ]]; then
            # variable set manually
            local var="$option $setting_my"
        elif [[ $(check_variable $setting_my) == 2 ]]; then
            # variable not set, default
            local var="$option$setting_default"
        fi 
    
    elif [[ $(check_variable $setting_manually) == 0 ]]; then
        
        if [[ $(check_file $setting_manually) != 0 ]]; then
            die "The given lua file $setting_manually does not exist."
        else
            # variable set manually
            local var="$option=$setting_manually"
        fi
    
    elif [[ $(check_variable $setting_manually) == 2 ]]; then
        
        # variable not set, default
        local var="$option$setting_default"
    
    else
        
        die "Error with the theme option"
    
    fi

elif [[ $flag_theme_in_file == 0 ]]; then

    local var=""

else
        
    die "Error with the theme option"
    
fi
#..return value
echo "$var"
}


#-------------#


function set_slidelevel {

local option="--slide-level"
local setting_manually="$level"
local setting_default=$LEVEL_VAR
local setting_my=$MY_LEVEL_VAR

#-- check if levels are not higher then 2
if [[ $setting_manually > 2 || $setting_default > 2 || $setting_my > 2 ]]; then

    die "Only slide levels 0, 1 and 2 are valid."

fi

if [[ $setlocal == 0 && $(check_variable $setting_manually) != 0 ]]; then
    
    if [[ $(check_variable $setting_my) == 0 ]]; then
        # variable set manually
        local var="$option=$setting_my"
    elif [[ $(check_variable $setting_my) == 2 ]]; then
        # variable not set, default
        local var="$option=$setting_default"
    fi 

elif [[ $(check_variable $setting_manually) == 0 ]]; then
    
    local var="$option=$setting_manually"

elif [[ $(check_variable $setting_manually) == 2 ]]; then
    
    # variable not set, default
    local var="$option=$setting_default"

else
    
    die "Error with the sidelevel option"

fi

#..return value
echo "$var"

}

#-------------#

function configure_pandoc_settings(){
#function set_pandoc_optionsdependency_setting {

#.. setting the dependency level, the lower the more dependet on web connection
#.. accordingly to the setting 
local set_options="\
--standalone \
--to=revealjs \
--filter pandoc-tablenos \
--filter pandoc-fignos \
--filter pandoc-eqnos \
--filter pandoc-kroki \
--metadata link-citations=false"

#.. set bibliograhy 
local set_options="$set_options $(set_bibliography)"

#.. set latex compiler
local set_options="$set_options $(set_latex)"

#.. set lua filter
local set_options="$set_options $(set_lua)"

#.. set revealjs path
local set_options="$set_options $(set_revealjs)"

#.. set theme
local set_options="$set_options $(set_theme)"

#.. set slidelevel
local set_options="$set_options $(set_slidelevel)"

#.. set display status of table of content
if [[ "$toc_var" == 0 ]]; then
    local set_options="$set_options --toc --toc-depth=1"
fi
 
#.. set display status of data on the title
if [[ "$date_var" == 0 ]]; then
    local set_options="$set_options -M date=`date +%d.%m.%Y`"
fi

#.. set self contained option, not recommanded
if [[ $self_contained == 0 ]]; then
    local set_options="$set_options --embed-resources"
fi

echo "$set_options"
}

#-------------#

function printhelp() {
cat <<-EOM

Usage: md2reveal [OPTION]... FILE
Converts markdown file via pandoc to a html presentation using reveal.js.

Requirements:
  - pandoc v2.12 and above
  - reveal.js from https://github.com/hakimel/reveal.js/

Example of usage:
  md2reveal report.md 

Options:

 -h   --help                       prints this help message and exit
 -o   --output                     determines output file name 
      --local                      uses your own default settings, TODO still in the script itself
      --bibliography STR           location of your citation file *.bib format
      --katex STR                  location of your katex interpreter
      --lua STR                    location of additional lua filter 
      --revealjs STR               location of your revealjs installation
      --theme STR                  name of the used theme 
      --level NUM                  level definitions  
                                   NUM=0 slides are determined by dashes (min. 4 ----)
                                   NUM=1 slides are determined by heading level 1 
                                   NUM=2 slides and subslides are determined by heading level 1 & 2
      
      --self-contained             generated html file will be self contained, not recommended 
      --title-background STR       location of an additional title background image
      --title-background-color STR hash color code for an additional colored title background
      --remove-one-level           set one presentation one level back, removes the # headers
      --date                       adds today to the title
      --toc                        adds an table of content as the second slide
      --pdf STR                    creats an pdf from a given *.html presentation and exits
 
-------------------------------------------------------

NOTE: none 

EOM
}

#-------------#

function argparser(){

# parse options
while [ -n "$1" ]; do
  case $1 in
    -h  | --help                   ) printhelp && exit 0 ;;
    -o  | --output                 ) outfile="$2"; shift 2 ;;
          --local                  ) setlocal=0; shift 1 ;;
          --bibliography           ) bibliography="$2"; shift 2 ;;
          --katex                  ) latex="$2"; shift 2 ;;
          --lua                    ) lua="$2"; shift 2 ;;
          --revealjs               ) revealjs="$2"; shift 2 ;;
          --theme                  ) theme="$2"; shift 2 ;;
          --level                  ) level="$2"; shift 2 ;;
          --self-contained         ) self_contained=0; shift 1 ;;
          --title-background       ) title_background="$2"; shift 2 ;;
          --title-background-color ) title_background_color="$2"; shift 2 ;;
          --date                   ) date_var=0; shift ;;
          --toc                    ) toc_var=0; shift ;;
          --remove-one-level       ) back_var=0; shift ;;
          --pdf                    ) create_pdf=0; printsize=$2; shift 2 ;;
          --                       ) shift; break ;;
          -*                       ) msg "unknown option (ignored): $1"; shift ;;
          *                        ) break ;;
  esac
done

#-- checks --#
if [[ $(check_file $1) == 0 && ${1##*.} == md ]]; then
    input=$1
elif [[ $(check_file $1) == 0 && ${1##*.} == html && $create_pdf == 0 ]]; then
    input=$1
else
    die "No input markdown file with the extension *.md is given."
fi

if [[ ( $(check_variable $revealjs) == 0 || $setlocal == 0 ) && $(check_folder $MY_REVEALJS_VAR) != 0 ]];then
die "<live-server does only work with relativ paths!
Consider using soft or hardlinks"
fi

}    

#== POST PROCESSING FUNCTIONS ==#

#-----------------------#

function set_background(){

local color_image=titlebackgroundcolor.png
local flag_image=$(check_file $title_background)
local flag_color=$(check_variable $title_background_color)
local flag_color_image=$(check_file $color_image)

local flag_my_color=$(check_variable $MY_TITLE_BACKGROUND_COLOR)
local flag_my_image=$(check_variable $MY_TITLE_BACKGROUND_IMAGE)


#-- Checks
if  [[ $flag_image == 0 && $flag_color == 0 ]]; then
    die "Title background image and color is defined. Please chose one only."
fi

#-- applying image settings
if  [[ $flag_image == 0 ]]; then
    
    sed -i "s;id=\"title-slide\";& data-background-image=$title_background;" $1
    #echo "Title Background is set to: $title_background"

elif  [[ $flag_color == 0 ]]; then
    
    sed -i "s;id=\"title-slide\";& data-background-color=$title_background_color;" $1
    #echo "Title Background is set to color $title_background_color"

#-- set local option if no flag is raised
elif [[  $setlocal == 0 ]]; then
    if  [[ $flag_my_image == 0 && $flag_my_color == 0 ]]; then
        die "Only one own defined (.mdrevealrc) title background image and color can be used."
    fi
    
    if  [[ $flag_my_image == 0 ]]; then
        
        title_background=$MY_TITLE_BACKGROUND_IMAGE
        sed -i "s;id=\"title-slide\";& data-background-image=$title_background;" $1
        #echo "Title Background is set to: $title_background"
    
    elif  [[ $flag_my_color == 0 ]]; then
        
        title_background_color=$MY_TITLE_BACKGROUND_COLOR
        sed -i "s;id=\"title-slide\";& data-background-color=$title_background_color;" $1
        #echo "Title Background is set to color $title_background_color"
    
    fi
fi

}

#-----------------------#

function set_document_level(){
#-- if level 1, it removes all 2nd levels
if [[ "$level" == 1 ]]; then
    sed -i 's/^##/#/' $1
fi
}

#-----------------------#

function set_document_onelevel_back(){
#-- remove one level
#.. can be usefull if just want to show content and
#.. not add a lot of extra slides, due to subtitle pages
if [ "$back_var" == 0 ]; then
    sed -i '/^# [a-Z]/d' $1
    sed -i 's/^#//' $1
fi
}

#-----------------------#

function preprocessing_document(){
#-- reassemble document 
#.. add tex header
#.. remove content between meta block and first header, otherwise an additional page will be created

local document=$1

local meta=$(sed -n '/^---$/,/^---$/p' $document)
local first_slide_header=$(sed -n '/^# [a-zA-Z0-9]/p' $document | head -n 1)
local header=$(echo "$meta"; echo $'\n'; echo "$first_slide_header") 
local body=$(cat $document | sed '/^---$/,/^# [a-zA-Z0-9]/d') 

echo "$header $texdef $body" > $1

}

#-----------------------#

function set_video_plugin(){
#.. add video.js online resource link in the head
local videojs="<link href=\"//vjs.zencdn.net/7.10.2/video-js.min.css\" rel=\"stylesheet\">\n<script src=\"//vjs.zencdn.net/7.10.2/video.min.js\"></script>"
#.. append the string
sed -i "/<head>/a $videojs" $1
}

function set_plugin(){
#.. add revealjs drawer plugin

local header1="<script src=\"./reveal.js/plugin/chalkboard/plugin.js\"></script>"
#local header2="<script src=\"./reveal.js/plugin/customcontrols/plugin.js\"></script>"
local header3="<link rel=\"stylesheet\" href=\"./reveal.js/plugin/chalkboard/style.css\">"
#local header4="<link rel=\"stylesheet\" href=\"./reveal.js/plugin/customcontrols/style.css\">"
local header5="<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/reveal.js-plugins/menu/font-awesome/css/fontawesome.css\">"
local plugin1="RevealChalkboard,"
local plugin2="RevealCustomControls,"

#local drawerjs="<link rel="stylesheet" href="./reveal.js/plugin/drawer/drawer.css" />\n<script src="./reveal.js/plugin/drawer/drawer.js"></script>"
#local plugin_init="RevealDrawer,"

sed -i "/<head>/a $header5" $1
#sed -i "/<head>/a $header4" $1
sed -i "/<head>/a $header3" $1
#sed -i "/<head>/a $header2" $1
sed -i "/<head>/a $header1" $1
sed -i "/RevealNotes,/a $plugin1" $1
#sed -i "/RevealNotes,/a $plugin2" $1
}


#-----------------------#

function create_pdf(){

if [[ "$create_pdf" == 0 ]]; then
    local filebase="${1%.*}"
    echo "decktape automatic --size $printsize $1 $filebase.pdf"
    decktape automatic --size $printsize $1 $filebase.pdf
    exit 0
fi

}

#-----------------------#
#----- Main Script -----#
#-----------------------#

#==== Argument parser ====#
#.. setting, do not use a subshell for this
argparser $@

#==== PDF ====#
create_pdf $input

#==== PREPROCESSING ====#
#-- Pandoc settings --#
theme_in_file=$(sed -n '/^---$/,/^---$/p' $input | grep theme:)
pandoc_options=$(configure_pandoc_settings)

#-- set output name --#
if [[ -z $outfile ]]; then
    outfile="${input%.*}_pres.html"
fi
echo "----------------------------"
echo "Output is set to $outfile"
echo "----------------------------"

#-- document cleanup
cp $input $tmp$input

#.. set level of the document
set_document_level $tmp$input
set_document_onelevel_back $tmp$input

#.. preprocess and clean up 
preprocessing_document $tmp$input

#==== MAIN DOCUMENT CREATION AND POSTCOMPILING PROCESSING ====#

#.. main target script
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>
echo "pandoc $pandoc_options $tmp$input -o $outfile"
pandoc $pandoc_options $tmp$input -o $outfile
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#==== PREPROCESSING ====#
set_background $outfile
set_video_plugin $outfile
#set_plugin $outfile
#==== Clean Up ====#
#rm $tmp$input

#=== END ===#


# ---- TRAY ---- #
##-- todo: what does the next 4 lines do? and what for
#sed -i "s/TeX-AMS_HTML-full/local\/local_reveal/" $outfile
#sed -i '/cdnjs\.cloudflare/d' $outfile
#sed -i 's/<figcaption>/\n&/g' $outfile
#sed -i "/src=\"\"/d" $outfile


